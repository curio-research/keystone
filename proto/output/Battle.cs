// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: battle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbBattle {

  /// <summary>Holder for reflection information generated from battle.proto</summary>
  public static partial class BattleReflection {

    #region Descriptor
    /// <summary>File descriptor for battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxiYXR0bGUucHJvdG8SCXBiX2JhdHRsZRoKYmFzZS5wcm90byKkAQoPTGFy",
            "Z2VUaWxlQ2hhbmdlEg4KBlRpbGVJZBgBIAEoAxIXCg9QcmV2aW91c093bmVy",
            "SWQYAiABKAUSEgoKTmV3T3duZXJJZBgDIAEoBRIVCg1QcmV2aW91c0xldmVs",
            "GAQgASgFEhAKCE5ld0xldmVsGAUgASgFEhcKD1ByZXZpb3VzVmlzaWJsZRgG",
            "IAEoCBISCgpOZXdWaXNpYmxlGAcgASgIIpABCgtDMlNfUHJvZHVjZRIlCgRU",
            "eXBlGAEgASgOMhcucGJfYmFzZS5Ucm9vcFN0YWNrVHlwZRIOCgZBbW91bnQY",
            "AiABKAUSFwoPVGFyZ2V0TGFyZ2VUaWxlGAMgASgDEjEKD0lkZW50aXR5UGF5",
            "bG9hZBgEIAEoCzIYLnBiX2Jhc2UuSWRlbnRpdHlQYXlsb2FkIoYBChNDMlNf",
            "UHJvZHVjZUJ1aWxkaW5nEiMKBFR5cGUYASABKA4yFS5wYl9iYXNlLkJ1aWxk",
            "aW5nVHlwZRIXCg9UYXJnZXRMYXJnZVRpbGUYAiABKAMSMQoPSWRlbnRpdHlQ",
            "YXlsb2FkGAMgASgLMhgucGJfYmFzZS5JZGVudGl0eVBheWxvYWQihAEKDkMy",
            "U19Nb3ZlVHJvb3BzEhQKDFRyb29wQW1vdW50cxgBIAMoAxIQCghTdGFja0lk",
            "cxgCIAMoAxIXCg9UYXJnZXRMYXJnZVRpbGUYAyABKAMSMQoPSWRlbnRpdHlQ",
            "YXlsb2FkGAQgASgLMhgucGJfYmFzZS5JZGVudGl0eVBheWxvYWQihgEKCkMy",
            "U19BdHRhY2sSFgoOQXR0YWNrZXJUaWxlSWQYASABKAMSFwoPSXNCb21iaW5n",
            "QXR0YWNrGAIgASgIEhQKDFRhcmdldFRpbGVJZBgDIAEoAxIxCg9JZGVudGl0",
            "eVBheWxvYWQYBCABKAsyGC5wYl9iYXNlLklkZW50aXR5UGF5bG9hZCJhChdD",
            "MlNfVG9nZ2xlVGFua0d1YXJkTW9kZRITCgtUYW5rU3RhY2tJZBgBIAEoAxIx",
            "Cg9JZGVudGl0eVBheWxvYWQYAiABKAsyGC5wYl9iYXNlLklkZW50aXR5UGF5",
            "bG9hZCKvAQoNQzJTX1BsYW5lTG9hZBIUCgxQbGFuZVN0YWNrSWQYASABKAMS",
            "KgoNT25Hcm91bmRTdGFjaxgCIAEoCzITLnBiX2Jhc2UuVHJvb3BTdGFjaxIp",
            "CgxDYXJyaWVkU3RhY2sYAyABKAsyEy5wYl9iYXNlLlRyb29wU3RhY2sSMQoP",
            "SWRlbnRpdHlQYXlsb2FkGAQgASgLMhgucGJfYmFzZS5JZGVudGl0eVBheWxv",
            "YWQiWgoPQzJTX1BsYW5lVW5sb2FkEhQKDFBsYW5lU3RhY2tJZBgBIAEoAxIx",
            "Cg9JZGVudGl0eVBheWxvYWQYAiABKAsyGC5wYl9iYXNlLklkZW50aXR5UGF5",
            "bG9hZCI5CgtTMkNfUHJvZHVjZRIqCg1Qcm9kdWNlZFN0YWNrGAEgASgLMhMu",
            "cGJfYmFzZS5Ucm9vcFN0YWNrIlAKElMyQ19Dcm9zc0xhcmdlVGlsZRIPCgdT",
            "dGFja0lkGAEgASgDEhYKDlByZXZpb3VzVGlsZUlkGAIgASgDEhEKCU5ld1Rp",
            "bGVJZBgDIAEoAyJCChpTMkNfTW92ZVRyb29wc1BsYW5uaW5nUGF0aBIkCglN",
            "b3ZlUGxhbnMYASADKAsyES5wYl9iYXNlLk1vdmVQbGFuIjsKEFMyQ19Nb3Zl",
            "Q29tcGxldGUSJwoKTW92ZWRTdGFjaxgBIAEoCzITLnBiX2Jhc2UuVHJvb3BT",
            "dGFjayJUCg9TMkNfTWVyZ2VUcm9vcHMSFQoNTWVyZ2VkU3RhY2tJZBgBIAEo",
            "AxIqCg1FeGlzdGluZ1N0YWNrGAIgASgLMhMucGJfYmFzZS5Ucm9vcFN0YWNr",
            "IlsKClMyQ19BdHRhY2sSEQoJSXNWaWN0b3J5GAEgASgIEhIKCkF0dGFja2Vy",
            "SWQYAiABKAMSEAoIU3RhY2tJZHMYAyADKAMSFAoMVHJvb3BBbW91bnRzGAQg",
            "AygDIk4KE1MyQ19MYXJnZVRpbGVDaGFuZ2USNwoTTGFyZ2VUaWxlQ2hhbmdl",
            "TGlzdBgBIAMoCzIaLnBiX2JhdHRsZS5MYXJnZVRpbGVDaGFuZ2UiQgoXUzJD",
            "X1RvZ2dsZVRhbmtHdWFyZE1vZGUSEwoLVGFua1N0YWNrSWQYASABKAMSEgoK",
            "SXNHdWFyZGluZxgCIAEoCCJCChNTMkNfUHJvZHVjZUJ1aWxkaW5nEisKEFBy",
            "b2R1Y2VkQnVpbGRpbmcYASABKAsyES5wYl9iYXNlLkJ1aWxkaW5nIo4BCg1T",
            "MkNfUGxhbmVMb2FkEicKClBsYW5lU3RhY2sYASABKAsyEy5wYl9iYXNlLlRy",
            "b29wU3RhY2sSKgoNT3JpZ2luYWxTdGFjaxgCIAEoCzITLnBiX2Jhc2UuVHJv",
            "b3BTdGFjaxIoCgtMb2FkZWRTdGFjaxgDIAEoCzITLnBiX2Jhc2UuVHJvb3BT",
            "dGFjayJ7Cg9TMkNfUGxhbmVVbmxvYWQSJwoKUGxhbmVTdGFjaxgBIAEoCzIT",
            "LnBiX2Jhc2UuVHJvb3BTdGFjaxIVCg1NZXJnZWRTdGFja0lkGAIgASgDEigK",
            "C0dyb3VuZFN0YWNrGAMgASgLMhMucGJfYmFzZS5Ucm9vcFN0YWNrQgtaCXBi",
            "LmJhdHRsZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbBase.BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.LargeTileChange), global::PbBattle.LargeTileChange.Parser, new[]{ "TileId", "PreviousOwnerId", "NewOwnerId", "PreviousLevel", "NewLevel", "PreviousVisible", "NewVisible" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_Produce), global::PbBattle.C2S_Produce.Parser, new[]{ "Type", "Amount", "TargetLargeTile", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_ProduceBuilding), global::PbBattle.C2S_ProduceBuilding.Parser, new[]{ "Type", "TargetLargeTile", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_MoveTroops), global::PbBattle.C2S_MoveTroops.Parser, new[]{ "TroopAmounts", "StackIds", "TargetLargeTile", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_Attack), global::PbBattle.C2S_Attack.Parser, new[]{ "AttackerTileId", "IsBombingAttack", "TargetTileId", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_ToggleTankGuardMode), global::PbBattle.C2S_ToggleTankGuardMode.Parser, new[]{ "TankStackId", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_PlaneLoad), global::PbBattle.C2S_PlaneLoad.Parser, new[]{ "PlaneStackId", "OnGroundStack", "CarriedStack", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_PlaneUnload), global::PbBattle.C2S_PlaneUnload.Parser, new[]{ "PlaneStackId", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_Produce), global::PbBattle.S2C_Produce.Parser, new[]{ "ProducedStack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_CrossLargeTile), global::PbBattle.S2C_CrossLargeTile.Parser, new[]{ "StackId", "PreviousTileId", "NewTileId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_MoveTroopsPlanningPath), global::PbBattle.S2C_MoveTroopsPlanningPath.Parser, new[]{ "MovePlans" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_MoveComplete), global::PbBattle.S2C_MoveComplete.Parser, new[]{ "MovedStack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_MergeTroops), global::PbBattle.S2C_MergeTroops.Parser, new[]{ "MergedStackId", "ExistingStack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_Attack), global::PbBattle.S2C_Attack.Parser, new[]{ "IsVictory", "AttackerId", "StackIds", "TroopAmounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_LargeTileChange), global::PbBattle.S2C_LargeTileChange.Parser, new[]{ "LargeTileChangeList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_ToggleTankGuardMode), global::PbBattle.S2C_ToggleTankGuardMode.Parser, new[]{ "TankStackId", "IsGuarding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_ProduceBuilding), global::PbBattle.S2C_ProduceBuilding.Parser, new[]{ "ProducedBuilding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_PlaneLoad), global::PbBattle.S2C_PlaneLoad.Parser, new[]{ "PlaneStack", "OriginalStack", "LoadedStack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_PlaneUnload), global::PbBattle.S2C_PlaneUnload.Parser, new[]{ "PlaneStack", "MergedStackId", "GroundStack" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Tile Change Struct
  /// </summary>
  public sealed partial class LargeTileChange : pb::IMessage<LargeTileChange> {
    private static readonly pb::MessageParser<LargeTileChange> _parser = new pb::MessageParser<LargeTileChange>(() => new LargeTileChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LargeTileChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LargeTileChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LargeTileChange(LargeTileChange other) : this() {
      tileId_ = other.tileId_;
      previousOwnerId_ = other.previousOwnerId_;
      newOwnerId_ = other.newOwnerId_;
      previousLevel_ = other.previousLevel_;
      newLevel_ = other.newLevel_;
      previousVisible_ = other.previousVisible_;
      newVisible_ = other.newVisible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LargeTileChange Clone() {
      return new LargeTileChange(this);
    }

    /// <summary>Field number for the "TileId" field.</summary>
    public const int TileIdFieldNumber = 1;
    private long tileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TileId {
      get { return tileId_; }
      set {
        tileId_ = value;
      }
    }

    /// <summary>Field number for the "PreviousOwnerId" field.</summary>
    public const int PreviousOwnerIdFieldNumber = 2;
    private int previousOwnerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreviousOwnerId {
      get { return previousOwnerId_; }
      set {
        previousOwnerId_ = value;
      }
    }

    /// <summary>Field number for the "NewOwnerId" field.</summary>
    public const int NewOwnerIdFieldNumber = 3;
    private int newOwnerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewOwnerId {
      get { return newOwnerId_; }
      set {
        newOwnerId_ = value;
      }
    }

    /// <summary>Field number for the "PreviousLevel" field.</summary>
    public const int PreviousLevelFieldNumber = 4;
    private int previousLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreviousLevel {
      get { return previousLevel_; }
      set {
        previousLevel_ = value;
      }
    }

    /// <summary>Field number for the "NewLevel" field.</summary>
    public const int NewLevelFieldNumber = 5;
    private int newLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewLevel {
      get { return newLevel_; }
      set {
        newLevel_ = value;
      }
    }

    /// <summary>Field number for the "PreviousVisible" field.</summary>
    public const int PreviousVisibleFieldNumber = 6;
    private bool previousVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreviousVisible {
      get { return previousVisible_; }
      set {
        previousVisible_ = value;
      }
    }

    /// <summary>Field number for the "NewVisible" field.</summary>
    public const int NewVisibleFieldNumber = 7;
    private bool newVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewVisible {
      get { return newVisible_; }
      set {
        newVisible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LargeTileChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LargeTileChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TileId != other.TileId) return false;
      if (PreviousOwnerId != other.PreviousOwnerId) return false;
      if (NewOwnerId != other.NewOwnerId) return false;
      if (PreviousLevel != other.PreviousLevel) return false;
      if (NewLevel != other.NewLevel) return false;
      if (PreviousVisible != other.PreviousVisible) return false;
      if (NewVisible != other.NewVisible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TileId != 0L) hash ^= TileId.GetHashCode();
      if (PreviousOwnerId != 0) hash ^= PreviousOwnerId.GetHashCode();
      if (NewOwnerId != 0) hash ^= NewOwnerId.GetHashCode();
      if (PreviousLevel != 0) hash ^= PreviousLevel.GetHashCode();
      if (NewLevel != 0) hash ^= NewLevel.GetHashCode();
      if (PreviousVisible != false) hash ^= PreviousVisible.GetHashCode();
      if (NewVisible != false) hash ^= NewVisible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TileId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TileId);
      }
      if (PreviousOwnerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PreviousOwnerId);
      }
      if (NewOwnerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NewOwnerId);
      }
      if (PreviousLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PreviousLevel);
      }
      if (NewLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NewLevel);
      }
      if (PreviousVisible != false) {
        output.WriteRawTag(48);
        output.WriteBool(PreviousVisible);
      }
      if (NewVisible != false) {
        output.WriteRawTag(56);
        output.WriteBool(NewVisible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TileId);
      }
      if (PreviousOwnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreviousOwnerId);
      }
      if (NewOwnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewOwnerId);
      }
      if (PreviousLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreviousLevel);
      }
      if (NewLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewLevel);
      }
      if (PreviousVisible != false) {
        size += 1 + 1;
      }
      if (NewVisible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LargeTileChange other) {
      if (other == null) {
        return;
      }
      if (other.TileId != 0L) {
        TileId = other.TileId;
      }
      if (other.PreviousOwnerId != 0) {
        PreviousOwnerId = other.PreviousOwnerId;
      }
      if (other.NewOwnerId != 0) {
        NewOwnerId = other.NewOwnerId;
      }
      if (other.PreviousLevel != 0) {
        PreviousLevel = other.PreviousLevel;
      }
      if (other.NewLevel != 0) {
        NewLevel = other.NewLevel;
      }
      if (other.PreviousVisible != false) {
        PreviousVisible = other.PreviousVisible;
      }
      if (other.NewVisible != false) {
        NewVisible = other.NewVisible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TileId = input.ReadInt64();
            break;
          }
          case 16: {
            PreviousOwnerId = input.ReadInt32();
            break;
          }
          case 24: {
            NewOwnerId = input.ReadInt32();
            break;
          }
          case 32: {
            PreviousLevel = input.ReadInt32();
            break;
          }
          case 40: {
            NewLevel = input.ReadInt32();
            break;
          }
          case 48: {
            PreviousVisible = input.ReadBool();
            break;
          }
          case 56: {
            NewVisible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Troops Producing params
  /// </summary>
  public sealed partial class C2S_Produce : pb::IMessage<C2S_Produce> {
    private static readonly pb::MessageParser<C2S_Produce> _parser = new pb::MessageParser<C2S_Produce>(() => new C2S_Produce());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Produce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Produce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Produce(C2S_Produce other) : this() {
      type_ = other.type_;
      amount_ = other.amount_;
      targetLargeTile_ = other.targetLargeTile_;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Produce Clone() {
      return new C2S_Produce(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::PbBase.TroopStackType type_ = global::PbBase.TroopStackType.Infantry;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "TargetLargeTile" field.</summary>
    public const int TargetLargeTileFieldNumber = 3;
    private long targetLargeTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetLargeTile {
      get { return targetLargeTile_; }
      set {
        targetLargeTile_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 4;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_Produce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_Produce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Amount != other.Amount) return false;
      if (TargetLargeTile != other.TargetLargeTile) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::PbBase.TroopStackType.Infantry) hash ^= Type.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (TargetLargeTile != 0L) hash ^= TargetLargeTile.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::PbBase.TroopStackType.Infantry) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (TargetLargeTile != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetLargeTile);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::PbBase.TroopStackType.Infantry) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (TargetLargeTile != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetLargeTile);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_Produce other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::PbBase.TroopStackType.Infantry) {
        Type = other.Type;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.TargetLargeTile != 0L) {
        TargetLargeTile = other.TargetLargeTile;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::PbBase.TroopStackType) input.ReadEnum();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
          case 24: {
            TargetLargeTile = input.ReadInt64();
            break;
          }
          case 34: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Troops Producing Building params
  /// </summary>
  public sealed partial class C2S_ProduceBuilding : pb::IMessage<C2S_ProduceBuilding> {
    private static readonly pb::MessageParser<C2S_ProduceBuilding> _parser = new pb::MessageParser<C2S_ProduceBuilding>(() => new C2S_ProduceBuilding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ProduceBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ProduceBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ProduceBuilding(C2S_ProduceBuilding other) : this() {
      type_ = other.type_;
      targetLargeTile_ = other.targetLargeTile_;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ProduceBuilding Clone() {
      return new C2S_ProduceBuilding(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::PbBase.BuildingType type_ = global::PbBase.BuildingType.TechCenter;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.BuildingType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "TargetLargeTile" field.</summary>
    public const int TargetLargeTileFieldNumber = 2;
    private long targetLargeTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetLargeTile {
      get { return targetLargeTile_; }
      set {
        targetLargeTile_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 3;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ProduceBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ProduceBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TargetLargeTile != other.TargetLargeTile) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::PbBase.BuildingType.TechCenter) hash ^= Type.GetHashCode();
      if (TargetLargeTile != 0L) hash ^= TargetLargeTile.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::PbBase.BuildingType.TechCenter) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TargetLargeTile != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetLargeTile);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::PbBase.BuildingType.TechCenter) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TargetLargeTile != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetLargeTile);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ProduceBuilding other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::PbBase.BuildingType.TechCenter) {
        Type = other.Type;
      }
      if (other.TargetLargeTile != 0L) {
        TargetLargeTile = other.TargetLargeTile;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::PbBase.BuildingType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetLargeTile = input.ReadInt64();
            break;
          }
          case 26: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Troops Movement params
  /// </summary>
  public sealed partial class C2S_MoveTroops : pb::IMessage<C2S_MoveTroops> {
    private static readonly pb::MessageParser<C2S_MoveTroops> _parser = new pb::MessageParser<C2S_MoveTroops>(() => new C2S_MoveTroops());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_MoveTroops> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MoveTroops() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MoveTroops(C2S_MoveTroops other) : this() {
      troopAmounts_ = other.troopAmounts_.Clone();
      stackIds_ = other.stackIds_.Clone();
      targetLargeTile_ = other.targetLargeTile_;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MoveTroops Clone() {
      return new C2S_MoveTroops(this);
    }

    /// <summary>Field number for the "TroopAmounts" field.</summary>
    public const int TroopAmountsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_troopAmounts_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> troopAmounts_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TroopAmounts {
      get { return troopAmounts_; }
    }

    /// <summary>Field number for the "StackIds" field.</summary>
    public const int StackIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_stackIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> stackIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> StackIds {
      get { return stackIds_; }
    }

    /// <summary>Field number for the "TargetLargeTile" field.</summary>
    public const int TargetLargeTileFieldNumber = 3;
    private long targetLargeTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetLargeTile {
      get { return targetLargeTile_; }
      set {
        targetLargeTile_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 4;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_MoveTroops);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_MoveTroops other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!troopAmounts_.Equals(other.troopAmounts_)) return false;
      if(!stackIds_.Equals(other.stackIds_)) return false;
      if (TargetLargeTile != other.TargetLargeTile) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= troopAmounts_.GetHashCode();
      hash ^= stackIds_.GetHashCode();
      if (TargetLargeTile != 0L) hash ^= TargetLargeTile.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      troopAmounts_.WriteTo(output, _repeated_troopAmounts_codec);
      stackIds_.WriteTo(output, _repeated_stackIds_codec);
      if (TargetLargeTile != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetLargeTile);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += troopAmounts_.CalculateSize(_repeated_troopAmounts_codec);
      size += stackIds_.CalculateSize(_repeated_stackIds_codec);
      if (TargetLargeTile != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetLargeTile);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_MoveTroops other) {
      if (other == null) {
        return;
      }
      troopAmounts_.Add(other.troopAmounts_);
      stackIds_.Add(other.stackIds_);
      if (other.TargetLargeTile != 0L) {
        TargetLargeTile = other.TargetLargeTile;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            troopAmounts_.AddEntriesFrom(input, _repeated_troopAmounts_codec);
            break;
          }
          case 18:
          case 16: {
            stackIds_.AddEntriesFrom(input, _repeated_stackIds_codec);
            break;
          }
          case 24: {
            TargetLargeTile = input.ReadInt64();
            break;
          }
          case 34: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Troops Attacking params
  /// </summary>
  public sealed partial class C2S_Attack : pb::IMessage<C2S_Attack> {
    private static readonly pb::MessageParser<C2S_Attack> _parser = new pb::MessageParser<C2S_Attack>(() => new C2S_Attack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Attack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Attack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Attack(C2S_Attack other) : this() {
      attackerTileId_ = other.attackerTileId_;
      isBombingAttack_ = other.isBombingAttack_;
      targetTileId_ = other.targetTileId_;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Attack Clone() {
      return new C2S_Attack(this);
    }

    /// <summary>Field number for the "AttackerTileId" field.</summary>
    public const int AttackerTileIdFieldNumber = 1;
    private long attackerTileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttackerTileId {
      get { return attackerTileId_; }
      set {
        attackerTileId_ = value;
      }
    }

    /// <summary>Field number for the "IsBombingAttack" field.</summary>
    public const int IsBombingAttackFieldNumber = 2;
    private bool isBombingAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBombingAttack {
      get { return isBombingAttack_; }
      set {
        isBombingAttack_ = value;
      }
    }

    /// <summary>Field number for the "TargetTileId" field.</summary>
    public const int TargetTileIdFieldNumber = 3;
    private long targetTileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetTileId {
      get { return targetTileId_; }
      set {
        targetTileId_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 4;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_Attack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_Attack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackerTileId != other.AttackerTileId) return false;
      if (IsBombingAttack != other.IsBombingAttack) return false;
      if (TargetTileId != other.TargetTileId) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackerTileId != 0L) hash ^= AttackerTileId.GetHashCode();
      if (IsBombingAttack != false) hash ^= IsBombingAttack.GetHashCode();
      if (TargetTileId != 0L) hash ^= TargetTileId.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerTileId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AttackerTileId);
      }
      if (IsBombingAttack != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBombingAttack);
      }
      if (TargetTileId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetTileId);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttackerTileId);
      }
      if (IsBombingAttack != false) {
        size += 1 + 1;
      }
      if (TargetTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetTileId);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_Attack other) {
      if (other == null) {
        return;
      }
      if (other.AttackerTileId != 0L) {
        AttackerTileId = other.AttackerTileId;
      }
      if (other.IsBombingAttack != false) {
        IsBombingAttack = other.IsBombingAttack;
      }
      if (other.TargetTileId != 0L) {
        TargetTileId = other.TargetTileId;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackerTileId = input.ReadInt64();
            break;
          }
          case 16: {
            IsBombingAttack = input.ReadBool();
            break;
          }
          case 24: {
            TargetTileId = input.ReadInt64();
            break;
          }
          case 34: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set Tank Guard Mode
  /// </summary>
  public sealed partial class C2S_ToggleTankGuardMode : pb::IMessage<C2S_ToggleTankGuardMode> {
    private static readonly pb::MessageParser<C2S_ToggleTankGuardMode> _parser = new pb::MessageParser<C2S_ToggleTankGuardMode>(() => new C2S_ToggleTankGuardMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ToggleTankGuardMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ToggleTankGuardMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ToggleTankGuardMode(C2S_ToggleTankGuardMode other) : this() {
      tankStackId_ = other.tankStackId_;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ToggleTankGuardMode Clone() {
      return new C2S_ToggleTankGuardMode(this);
    }

    /// <summary>Field number for the "TankStackId" field.</summary>
    public const int TankStackIdFieldNumber = 1;
    private long tankStackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TankStackId {
      get { return tankStackId_; }
      set {
        tankStackId_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 2;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ToggleTankGuardMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ToggleTankGuardMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TankStackId != other.TankStackId) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TankStackId != 0L) hash ^= TankStackId.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TankStackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TankStackId);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TankStackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TankStackId);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ToggleTankGuardMode other) {
      if (other == null) {
        return;
      }
      if (other.TankStackId != 0L) {
        TankStackId = other.TankStackId;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TankStackId = input.ReadInt64();
            break;
          }
          case 18: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Plane Load Troop
  /// </summary>
  public sealed partial class C2S_PlaneLoad : pb::IMessage<C2S_PlaneLoad> {
    private static readonly pb::MessageParser<C2S_PlaneLoad> _parser = new pb::MessageParser<C2S_PlaneLoad>(() => new C2S_PlaneLoad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_PlaneLoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlaneLoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlaneLoad(C2S_PlaneLoad other) : this() {
      planeStackId_ = other.planeStackId_;
      onGroundStack_ = other.onGroundStack_ != null ? other.onGroundStack_.Clone() : null;
      carriedStack_ = other.carriedStack_ != null ? other.carriedStack_.Clone() : null;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlaneLoad Clone() {
      return new C2S_PlaneLoad(this);
    }

    /// <summary>Field number for the "PlaneStackId" field.</summary>
    public const int PlaneStackIdFieldNumber = 1;
    private long planeStackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlaneStackId {
      get { return planeStackId_; }
      set {
        planeStackId_ = value;
      }
    }

    /// <summary>Field number for the "OnGroundStack" field.</summary>
    public const int OnGroundStackFieldNumber = 2;
    private global::PbBase.TroopStack onGroundStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack OnGroundStack {
      get { return onGroundStack_; }
      set {
        onGroundStack_ = value;
      }
    }

    /// <summary>Field number for the "CarriedStack" field.</summary>
    public const int CarriedStackFieldNumber = 3;
    private global::PbBase.TroopStack carriedStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack CarriedStack {
      get { return carriedStack_; }
      set {
        carriedStack_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 4;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_PlaneLoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_PlaneLoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneStackId != other.PlaneStackId) return false;
      if (!object.Equals(OnGroundStack, other.OnGroundStack)) return false;
      if (!object.Equals(CarriedStack, other.CarriedStack)) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneStackId != 0L) hash ^= PlaneStackId.GetHashCode();
      if (onGroundStack_ != null) hash ^= OnGroundStack.GetHashCode();
      if (carriedStack_ != null) hash ^= CarriedStack.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaneStackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlaneStackId);
      }
      if (onGroundStack_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OnGroundStack);
      }
      if (carriedStack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CarriedStack);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneStackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlaneStackId);
      }
      if (onGroundStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnGroundStack);
      }
      if (carriedStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CarriedStack);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_PlaneLoad other) {
      if (other == null) {
        return;
      }
      if (other.PlaneStackId != 0L) {
        PlaneStackId = other.PlaneStackId;
      }
      if (other.onGroundStack_ != null) {
        if (onGroundStack_ == null) {
          OnGroundStack = new global::PbBase.TroopStack();
        }
        OnGroundStack.MergeFrom(other.OnGroundStack);
      }
      if (other.carriedStack_ != null) {
        if (carriedStack_ == null) {
          CarriedStack = new global::PbBase.TroopStack();
        }
        CarriedStack.MergeFrom(other.CarriedStack);
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneStackId = input.ReadInt64();
            break;
          }
          case 18: {
            if (onGroundStack_ == null) {
              OnGroundStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(OnGroundStack);
            break;
          }
          case 26: {
            if (carriedStack_ == null) {
              CarriedStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(CarriedStack);
            break;
          }
          case 34: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Plane Load Troop
  /// </summary>
  public sealed partial class C2S_PlaneUnload : pb::IMessage<C2S_PlaneUnload> {
    private static readonly pb::MessageParser<C2S_PlaneUnload> _parser = new pb::MessageParser<C2S_PlaneUnload>(() => new C2S_PlaneUnload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_PlaneUnload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlaneUnload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlaneUnload(C2S_PlaneUnload other) : this() {
      planeStackId_ = other.planeStackId_;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlaneUnload Clone() {
      return new C2S_PlaneUnload(this);
    }

    /// <summary>Field number for the "PlaneStackId" field.</summary>
    public const int PlaneStackIdFieldNumber = 1;
    private long planeStackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlaneStackId {
      get { return planeStackId_; }
      set {
        planeStackId_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 2;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_PlaneUnload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_PlaneUnload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneStackId != other.PlaneStackId) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneStackId != 0L) hash ^= PlaneStackId.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaneStackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlaneStackId);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneStackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlaneStackId);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_PlaneUnload other) {
      if (other == null) {
        return;
      }
      if (other.PlaneStackId != 0L) {
        PlaneStackId = other.PlaneStackId;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneStackId = input.ReadInt64();
            break;
          }
          case 18: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Troop Producing
  /// </summary>
  public sealed partial class S2C_Produce : pb::IMessage<S2C_Produce> {
    private static readonly pb::MessageParser<S2C_Produce> _parser = new pb::MessageParser<S2C_Produce>(() => new S2C_Produce());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Produce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Produce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Produce(S2C_Produce other) : this() {
      producedStack_ = other.producedStack_ != null ? other.producedStack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Produce Clone() {
      return new S2C_Produce(this);
    }

    /// <summary>Field number for the "ProducedStack" field.</summary>
    public const int ProducedStackFieldNumber = 1;
    private global::PbBase.TroopStack producedStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack ProducedStack {
      get { return producedStack_; }
      set {
        producedStack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Produce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Produce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProducedStack, other.ProducedStack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (producedStack_ != null) hash ^= ProducedStack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (producedStack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProducedStack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (producedStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProducedStack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Produce other) {
      if (other == null) {
        return;
      }
      if (other.producedStack_ != null) {
        if (producedStack_ == null) {
          ProducedStack = new global::PbBase.TroopStack();
        }
        ProducedStack.MergeFrom(other.ProducedStack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (producedStack_ == null) {
              ProducedStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(ProducedStack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Troop Movement
  /// </summary>
  public sealed partial class S2C_CrossLargeTile : pb::IMessage<S2C_CrossLargeTile> {
    private static readonly pb::MessageParser<S2C_CrossLargeTile> _parser = new pb::MessageParser<S2C_CrossLargeTile>(() => new S2C_CrossLargeTile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CrossLargeTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CrossLargeTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CrossLargeTile(S2C_CrossLargeTile other) : this() {
      stackId_ = other.stackId_;
      previousTileId_ = other.previousTileId_;
      newTileId_ = other.newTileId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CrossLargeTile Clone() {
      return new S2C_CrossLargeTile(this);
    }

    /// <summary>Field number for the "StackId" field.</summary>
    public const int StackIdFieldNumber = 1;
    private long stackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StackId {
      get { return stackId_; }
      set {
        stackId_ = value;
      }
    }

    /// <summary>Field number for the "PreviousTileId" field.</summary>
    public const int PreviousTileIdFieldNumber = 2;
    private long previousTileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreviousTileId {
      get { return previousTileId_; }
      set {
        previousTileId_ = value;
      }
    }

    /// <summary>Field number for the "NewTileId" field.</summary>
    public const int NewTileIdFieldNumber = 3;
    private long newTileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewTileId {
      get { return newTileId_; }
      set {
        newTileId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CrossLargeTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CrossLargeTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StackId != other.StackId) return false;
      if (PreviousTileId != other.PreviousTileId) return false;
      if (NewTileId != other.NewTileId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StackId != 0L) hash ^= StackId.GetHashCode();
      if (PreviousTileId != 0L) hash ^= PreviousTileId.GetHashCode();
      if (NewTileId != 0L) hash ^= NewTileId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StackId);
      }
      if (PreviousTileId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PreviousTileId);
      }
      if (NewTileId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NewTileId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StackId);
      }
      if (PreviousTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreviousTileId);
      }
      if (NewTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewTileId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CrossLargeTile other) {
      if (other == null) {
        return;
      }
      if (other.StackId != 0L) {
        StackId = other.StackId;
      }
      if (other.PreviousTileId != 0L) {
        PreviousTileId = other.PreviousTileId;
      }
      if (other.NewTileId != 0L) {
        NewTileId = other.NewTileId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StackId = input.ReadInt64();
            break;
          }
          case 16: {
            PreviousTileId = input.ReadInt64();
            break;
          }
          case 24: {
            NewTileId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Troop Movement Plan Path
  /// </summary>
  public sealed partial class S2C_MoveTroopsPlanningPath : pb::IMessage<S2C_MoveTroopsPlanningPath> {
    private static readonly pb::MessageParser<S2C_MoveTroopsPlanningPath> _parser = new pb::MessageParser<S2C_MoveTroopsPlanningPath>(() => new S2C_MoveTroopsPlanningPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MoveTroopsPlanningPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveTroopsPlanningPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveTroopsPlanningPath(S2C_MoveTroopsPlanningPath other) : this() {
      movePlans_ = other.movePlans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveTroopsPlanningPath Clone() {
      return new S2C_MoveTroopsPlanningPath(this);
    }

    /// <summary>Field number for the "MovePlans" field.</summary>
    public const int MovePlansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbBase.MovePlan> _repeated_movePlans_codec
        = pb::FieldCodec.ForMessage(10, global::PbBase.MovePlan.Parser);
    private readonly pbc::RepeatedField<global::PbBase.MovePlan> movePlans_ = new pbc::RepeatedField<global::PbBase.MovePlan>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.MovePlan> MovePlans {
      get { return movePlans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MoveTroopsPlanningPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MoveTroopsPlanningPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!movePlans_.Equals(other.movePlans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= movePlans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      movePlans_.WriteTo(output, _repeated_movePlans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += movePlans_.CalculateSize(_repeated_movePlans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MoveTroopsPlanningPath other) {
      if (other == null) {
        return;
      }
      movePlans_.Add(other.movePlans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            movePlans_.AddEntriesFrom(input, _repeated_movePlans_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Troop Movement
  /// </summary>
  public sealed partial class S2C_MoveComplete : pb::IMessage<S2C_MoveComplete> {
    private static readonly pb::MessageParser<S2C_MoveComplete> _parser = new pb::MessageParser<S2C_MoveComplete>(() => new S2C_MoveComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MoveComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveComplete(S2C_MoveComplete other) : this() {
      movedStack_ = other.movedStack_ != null ? other.movedStack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveComplete Clone() {
      return new S2C_MoveComplete(this);
    }

    /// <summary>Field number for the "MovedStack" field.</summary>
    public const int MovedStackFieldNumber = 1;
    private global::PbBase.TroopStack movedStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack MovedStack {
      get { return movedStack_; }
      set {
        movedStack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MoveComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MoveComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MovedStack, other.MovedStack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (movedStack_ != null) hash ^= MovedStack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (movedStack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MovedStack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (movedStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MovedStack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MoveComplete other) {
      if (other == null) {
        return;
      }
      if (other.movedStack_ != null) {
        if (movedStack_ == null) {
          MovedStack = new global::PbBase.TroopStack();
        }
        MovedStack.MergeFrom(other.MovedStack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (movedStack_ == null) {
              MovedStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(MovedStack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] When Troops move to same position, one troop stack remains, another troop will get merged
  /// </summary>
  public sealed partial class S2C_MergeTroops : pb::IMessage<S2C_MergeTroops> {
    private static readonly pb::MessageParser<S2C_MergeTroops> _parser = new pb::MessageParser<S2C_MergeTroops>(() => new S2C_MergeTroops());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MergeTroops> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MergeTroops() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MergeTroops(S2C_MergeTroops other) : this() {
      mergedStackId_ = other.mergedStackId_;
      existingStack_ = other.existingStack_ != null ? other.existingStack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MergeTroops Clone() {
      return new S2C_MergeTroops(this);
    }

    /// <summary>Field number for the "MergedStackId" field.</summary>
    public const int MergedStackIdFieldNumber = 1;
    private long mergedStackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MergedStackId {
      get { return mergedStackId_; }
      set {
        mergedStackId_ = value;
      }
    }

    /// <summary>Field number for the "ExistingStack" field.</summary>
    public const int ExistingStackFieldNumber = 2;
    private global::PbBase.TroopStack existingStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack ExistingStack {
      get { return existingStack_; }
      set {
        existingStack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MergeTroops);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MergeTroops other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MergedStackId != other.MergedStackId) return false;
      if (!object.Equals(ExistingStack, other.ExistingStack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MergedStackId != 0L) hash ^= MergedStackId.GetHashCode();
      if (existingStack_ != null) hash ^= ExistingStack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MergedStackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MergedStackId);
      }
      if (existingStack_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExistingStack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MergedStackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MergedStackId);
      }
      if (existingStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExistingStack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MergeTroops other) {
      if (other == null) {
        return;
      }
      if (other.MergedStackId != 0L) {
        MergedStackId = other.MergedStackId;
      }
      if (other.existingStack_ != null) {
        if (existingStack_ == null) {
          ExistingStack = new global::PbBase.TroopStack();
        }
        ExistingStack.MergeFrom(other.ExistingStack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MergedStackId = input.ReadInt64();
            break;
          }
          case 18: {
            if (existingStack_ == null) {
              ExistingStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(ExistingStack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Troop Attack
  /// </summary>
  public sealed partial class S2C_Attack : pb::IMessage<S2C_Attack> {
    private static readonly pb::MessageParser<S2C_Attack> _parser = new pb::MessageParser<S2C_Attack>(() => new S2C_Attack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Attack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Attack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Attack(S2C_Attack other) : this() {
      isVictory_ = other.isVictory_;
      attackerId_ = other.attackerId_;
      stackIds_ = other.stackIds_.Clone();
      troopAmounts_ = other.troopAmounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Attack Clone() {
      return new S2C_Attack(this);
    }

    /// <summary>Field number for the "IsVictory" field.</summary>
    public const int IsVictoryFieldNumber = 1;
    private bool isVictory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVictory {
      get { return isVictory_; }
      set {
        isVictory_ = value;
      }
    }

    /// <summary>Field number for the "AttackerId" field.</summary>
    public const int AttackerIdFieldNumber = 2;
    private long attackerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttackerId {
      get { return attackerId_; }
      set {
        attackerId_ = value;
      }
    }

    /// <summary>Field number for the "StackIds" field.</summary>
    public const int StackIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_stackIds_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> stackIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// winner stack ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> StackIds {
      get { return stackIds_; }
    }

    /// <summary>Field number for the "TroopAmounts" field.</summary>
    public const int TroopAmountsFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_troopAmounts_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> troopAmounts_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// winner stack troop amounts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TroopAmounts {
      get { return troopAmounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Attack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Attack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsVictory != other.IsVictory) return false;
      if (AttackerId != other.AttackerId) return false;
      if(!stackIds_.Equals(other.stackIds_)) return false;
      if(!troopAmounts_.Equals(other.troopAmounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsVictory != false) hash ^= IsVictory.GetHashCode();
      if (AttackerId != 0L) hash ^= AttackerId.GetHashCode();
      hash ^= stackIds_.GetHashCode();
      hash ^= troopAmounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsVictory != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsVictory);
      }
      if (AttackerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AttackerId);
      }
      stackIds_.WriteTo(output, _repeated_stackIds_codec);
      troopAmounts_.WriteTo(output, _repeated_troopAmounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsVictory != false) {
        size += 1 + 1;
      }
      if (AttackerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttackerId);
      }
      size += stackIds_.CalculateSize(_repeated_stackIds_codec);
      size += troopAmounts_.CalculateSize(_repeated_troopAmounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Attack other) {
      if (other == null) {
        return;
      }
      if (other.IsVictory != false) {
        IsVictory = other.IsVictory;
      }
      if (other.AttackerId != 0L) {
        AttackerId = other.AttackerId;
      }
      stackIds_.Add(other.stackIds_);
      troopAmounts_.Add(other.troopAmounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsVictory = input.ReadBool();
            break;
          }
          case 16: {
            AttackerId = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            stackIds_.AddEntriesFrom(input, _repeated_stackIds_codec);
            break;
          }
          case 34:
          case 32: {
            troopAmounts_.AddEntriesFrom(input, _repeated_troopAmounts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Tile Metadata Change
  /// </summary>
  public sealed partial class S2C_LargeTileChange : pb::IMessage<S2C_LargeTileChange> {
    private static readonly pb::MessageParser<S2C_LargeTileChange> _parser = new pb::MessageParser<S2C_LargeTileChange>(() => new S2C_LargeTileChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LargeTileChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LargeTileChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LargeTileChange(S2C_LargeTileChange other) : this() {
      largeTileChangeList_ = other.largeTileChangeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LargeTileChange Clone() {
      return new S2C_LargeTileChange(this);
    }

    /// <summary>Field number for the "LargeTileChangeList" field.</summary>
    public const int LargeTileChangeListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbBattle.LargeTileChange> _repeated_largeTileChangeList_codec
        = pb::FieldCodec.ForMessage(10, global::PbBattle.LargeTileChange.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.LargeTileChange> largeTileChangeList_ = new pbc::RepeatedField<global::PbBattle.LargeTileChange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.LargeTileChange> LargeTileChangeList {
      get { return largeTileChangeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LargeTileChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LargeTileChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!largeTileChangeList_.Equals(other.largeTileChangeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= largeTileChangeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      largeTileChangeList_.WriteTo(output, _repeated_largeTileChangeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += largeTileChangeList_.CalculateSize(_repeated_largeTileChangeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LargeTileChange other) {
      if (other == null) {
        return;
      }
      largeTileChangeList_.Add(other.largeTileChangeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            largeTileChangeList_.AddEntriesFrom(input, _repeated_largeTileChangeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [blocking] Result of setting tank guard mode
  /// </summary>
  public sealed partial class S2C_ToggleTankGuardMode : pb::IMessage<S2C_ToggleTankGuardMode> {
    private static readonly pb::MessageParser<S2C_ToggleTankGuardMode> _parser = new pb::MessageParser<S2C_ToggleTankGuardMode>(() => new S2C_ToggleTankGuardMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ToggleTankGuardMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ToggleTankGuardMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ToggleTankGuardMode(S2C_ToggleTankGuardMode other) : this() {
      tankStackId_ = other.tankStackId_;
      isGuarding_ = other.isGuarding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ToggleTankGuardMode Clone() {
      return new S2C_ToggleTankGuardMode(this);
    }

    /// <summary>Field number for the "TankStackId" field.</summary>
    public const int TankStackIdFieldNumber = 1;
    private long tankStackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TankStackId {
      get { return tankStackId_; }
      set {
        tankStackId_ = value;
      }
    }

    /// <summary>Field number for the "IsGuarding" field.</summary>
    public const int IsGuardingFieldNumber = 2;
    private bool isGuarding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGuarding {
      get { return isGuarding_; }
      set {
        isGuarding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ToggleTankGuardMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ToggleTankGuardMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TankStackId != other.TankStackId) return false;
      if (IsGuarding != other.IsGuarding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TankStackId != 0L) hash ^= TankStackId.GetHashCode();
      if (IsGuarding != false) hash ^= IsGuarding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TankStackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TankStackId);
      }
      if (IsGuarding != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGuarding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TankStackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TankStackId);
      }
      if (IsGuarding != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ToggleTankGuardMode other) {
      if (other == null) {
        return;
      }
      if (other.TankStackId != 0L) {
        TankStackId = other.TankStackId;
      }
      if (other.IsGuarding != false) {
        IsGuarding = other.IsGuarding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TankStackId = input.ReadInt64();
            break;
          }
          case 16: {
            IsGuarding = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Building Producing
  /// </summary>
  public sealed partial class S2C_ProduceBuilding : pb::IMessage<S2C_ProduceBuilding> {
    private static readonly pb::MessageParser<S2C_ProduceBuilding> _parser = new pb::MessageParser<S2C_ProduceBuilding>(() => new S2C_ProduceBuilding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ProduceBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ProduceBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ProduceBuilding(S2C_ProduceBuilding other) : this() {
      producedBuilding_ = other.producedBuilding_ != null ? other.producedBuilding_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ProduceBuilding Clone() {
      return new S2C_ProduceBuilding(this);
    }

    /// <summary>Field number for the "ProducedBuilding" field.</summary>
    public const int ProducedBuildingFieldNumber = 1;
    private global::PbBase.Building producedBuilding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.Building ProducedBuilding {
      get { return producedBuilding_; }
      set {
        producedBuilding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ProduceBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ProduceBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProducedBuilding, other.ProducedBuilding)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (producedBuilding_ != null) hash ^= ProducedBuilding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (producedBuilding_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProducedBuilding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (producedBuilding_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProducedBuilding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ProduceBuilding other) {
      if (other == null) {
        return;
      }
      if (other.producedBuilding_ != null) {
        if (producedBuilding_ == null) {
          ProducedBuilding = new global::PbBase.Building();
        }
        ProducedBuilding.MergeFrom(other.ProducedBuilding);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (producedBuilding_ == null) {
              ProducedBuilding = new global::PbBase.Building();
            }
            input.ReadMessage(ProducedBuilding);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Plane Load Troop
  /// </summary>
  public sealed partial class S2C_PlaneLoad : pb::IMessage<S2C_PlaneLoad> {
    private static readonly pb::MessageParser<S2C_PlaneLoad> _parser = new pb::MessageParser<S2C_PlaneLoad>(() => new S2C_PlaneLoad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_PlaneLoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlaneLoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlaneLoad(S2C_PlaneLoad other) : this() {
      planeStack_ = other.planeStack_ != null ? other.planeStack_.Clone() : null;
      originalStack_ = other.originalStack_ != null ? other.originalStack_.Clone() : null;
      loadedStack_ = other.loadedStack_ != null ? other.loadedStack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlaneLoad Clone() {
      return new S2C_PlaneLoad(this);
    }

    /// <summary>Field number for the "PlaneStack" field.</summary>
    public const int PlaneStackFieldNumber = 1;
    private global::PbBase.TroopStack planeStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack PlaneStack {
      get { return planeStack_; }
      set {
        planeStack_ = value;
      }
    }

    /// <summary>Field number for the "OriginalStack" field.</summary>
    public const int OriginalStackFieldNumber = 2;
    private global::PbBase.TroopStack originalStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack OriginalStack {
      get { return originalStack_; }
      set {
        originalStack_ = value;
      }
    }

    /// <summary>Field number for the "LoadedStack" field.</summary>
    public const int LoadedStackFieldNumber = 3;
    private global::PbBase.TroopStack loadedStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack LoadedStack {
      get { return loadedStack_; }
      set {
        loadedStack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_PlaneLoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_PlaneLoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlaneStack, other.PlaneStack)) return false;
      if (!object.Equals(OriginalStack, other.OriginalStack)) return false;
      if (!object.Equals(LoadedStack, other.LoadedStack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (planeStack_ != null) hash ^= PlaneStack.GetHashCode();
      if (originalStack_ != null) hash ^= OriginalStack.GetHashCode();
      if (loadedStack_ != null) hash ^= LoadedStack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (planeStack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlaneStack);
      }
      if (originalStack_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OriginalStack);
      }
      if (loadedStack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LoadedStack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (planeStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneStack);
      }
      if (originalStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginalStack);
      }
      if (loadedStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadedStack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_PlaneLoad other) {
      if (other == null) {
        return;
      }
      if (other.planeStack_ != null) {
        if (planeStack_ == null) {
          PlaneStack = new global::PbBase.TroopStack();
        }
        PlaneStack.MergeFrom(other.PlaneStack);
      }
      if (other.originalStack_ != null) {
        if (originalStack_ == null) {
          OriginalStack = new global::PbBase.TroopStack();
        }
        OriginalStack.MergeFrom(other.OriginalStack);
      }
      if (other.loadedStack_ != null) {
        if (loadedStack_ == null) {
          LoadedStack = new global::PbBase.TroopStack();
        }
        LoadedStack.MergeFrom(other.LoadedStack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (planeStack_ == null) {
              PlaneStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(PlaneStack);
            break;
          }
          case 18: {
            if (originalStack_ == null) {
              OriginalStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(OriginalStack);
            break;
          }
          case 26: {
            if (loadedStack_ == null) {
              LoadedStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(LoadedStack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Result of Plane Unload Troop
  /// </summary>
  public sealed partial class S2C_PlaneUnload : pb::IMessage<S2C_PlaneUnload> {
    private static readonly pb::MessageParser<S2C_PlaneUnload> _parser = new pb::MessageParser<S2C_PlaneUnload>(() => new S2C_PlaneUnload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_PlaneUnload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.BattleReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlaneUnload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlaneUnload(S2C_PlaneUnload other) : this() {
      planeStack_ = other.planeStack_ != null ? other.planeStack_.Clone() : null;
      mergedStackId_ = other.mergedStackId_;
      groundStack_ = other.groundStack_ != null ? other.groundStack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlaneUnload Clone() {
      return new S2C_PlaneUnload(this);
    }

    /// <summary>Field number for the "PlaneStack" field.</summary>
    public const int PlaneStackFieldNumber = 1;
    private global::PbBase.TroopStack planeStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack PlaneStack {
      get { return planeStack_; }
      set {
        planeStack_ = value;
      }
    }

    /// <summary>Field number for the "MergedStackId" field.</summary>
    public const int MergedStackIdFieldNumber = 2;
    private long mergedStackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MergedStackId {
      get { return mergedStackId_; }
      set {
        mergedStackId_ = value;
      }
    }

    /// <summary>Field number for the "GroundStack" field.</summary>
    public const int GroundStackFieldNumber = 3;
    private global::PbBase.TroopStack groundStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack GroundStack {
      get { return groundStack_; }
      set {
        groundStack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_PlaneUnload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_PlaneUnload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlaneStack, other.PlaneStack)) return false;
      if (MergedStackId != other.MergedStackId) return false;
      if (!object.Equals(GroundStack, other.GroundStack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (planeStack_ != null) hash ^= PlaneStack.GetHashCode();
      if (MergedStackId != 0L) hash ^= MergedStackId.GetHashCode();
      if (groundStack_ != null) hash ^= GroundStack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (planeStack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlaneStack);
      }
      if (MergedStackId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MergedStackId);
      }
      if (groundStack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GroundStack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (planeStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneStack);
      }
      if (MergedStackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MergedStackId);
      }
      if (groundStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundStack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_PlaneUnload other) {
      if (other == null) {
        return;
      }
      if (other.planeStack_ != null) {
        if (planeStack_ == null) {
          PlaneStack = new global::PbBase.TroopStack();
        }
        PlaneStack.MergeFrom(other.PlaneStack);
      }
      if (other.MergedStackId != 0L) {
        MergedStackId = other.MergedStackId;
      }
      if (other.groundStack_ != null) {
        if (groundStack_ == null) {
          GroundStack = new global::PbBase.TroopStack();
        }
        GroundStack.MergeFrom(other.GroundStack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (planeStack_ == null) {
              PlaneStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(PlaneStack);
            break;
          }
          case 16: {
            MergedStackId = input.ReadInt64();
            break;
          }
          case 26: {
            if (groundStack_ == null) {
              GroundStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(GroundStack);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
