// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbBase {

  /// <summary>Holder for reflection information generated from base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpiYXNlLnByb3RvEgdwYl9iYXNlIiAKCFBvc2l0aW9uEgkKAVgYASABKAUS",
            "CQoBWRgCIAEoBSKCAQoITW92ZVBsYW4SKgoNT3JpZ2luYWxTdGFjaxgBIAEo",
            "CzITLnBiX2Jhc2UuVHJvb3BTdGFjaxIpCgxDdXJyZW50U3RhY2sYAiABKAsy",
            "Ey5wYl9iYXNlLlRyb29wU3RhY2sSHwoEUGF0aBgDIAMoCzIRLnBiX2Jhc2Uu",
            "UG9zaXRpb24iFgoFUm91bmQSDQoFQ291bnQYASABKAUiTgoOU2ltcGxlTW92",
            "ZVBsYW4SCgoCSWQYASABKAMSDwoHU3RhY2tJZBgCIAEoAxIfCgRQYXRoGAMg",
            "AygLMhEucGJfYmFzZS5Qb3NpdGlvbiIwCgZQbGF5ZXISCgoCSWQYASABKAMS",
            "DAoETmFtZRgCIAEoCRIMCgRSb2xlGAMgASgJImgKBFRpbGUSCgoCSWQYASAB",
            "KAMSDwoHT3duZXJJZBgCIAEoAxINCgVMZXZlbBgDIAEoBRIjCghQb3NpdGlv",
            "bhgEIAEoCzIRLnBiX2Jhc2UuUG9zaXRpb24SDwoHVmlzaWJsZRgFIAEoCCJa",
            "CgdDYXBpdGFsEgoKAklkGAEgASgDEg8KB093bmVySWQYAiABKAMSDQoFTGV2",
            "ZWwYAyABKAUSIwoIUG9zaXRpb24YBCABKAsyES5wYl9iYXNlLlBvc2l0aW9u",
            "IiUKBlRhbGVudBIKCgJJZBgBIAEoAxIPCgdPd25lcklkGAIgASgDIoABCghC",
            "dWlsZGluZxIKCgJJZBgBIAEoAxIPCgdPd25lcklkGAIgASgDEg0KBUxldmVs",
            "GAMgASgFEiMKCFBvc2l0aW9uGAQgASgLMhEucGJfYmFzZS5Qb3NpdGlvbhIj",
            "CgRUeXBlGAUgASgOMhUucGJfYmFzZS5CdWlsZGluZ1R5cGUizAEKClRyb29w",
            "U3RhY2sSCgoCSWQYASABKAMSDwoHT3duZXJJZBgCIAEoAxIlCgRUeXBlGAMg",
            "ASgOMhcucGJfYmFzZS5Ucm9vcFN0YWNrVHlwZRIOCgZBbW91bnQYBCABKAUS",
            "IwoIUG9zaXRpb24YBSABKAsyES5wYl9iYXNlLlBvc2l0aW9uEhcKD01vdmVt",
            "ZW50U3RhbWluYRgGIAEoBRIVCg1BdHRhY2tTdGFtaW5hGAcgASgFEhUKDUxv",
            "YWRlZFRyb29wSWQYCCABKAMiNQoPSWRlbnRpdHlQYXlsb2FkEhAKCEp3dFRv",
            "a2VuGAEgASgJEhAKCFBsYXllcklkGAIgASgDKj0KDlRyb29wU3RhY2tUeXBl",
            "EgwKCEluZmFudHJ5EAASCAoEVGFuaxABEggKBEZvcnQQAhIJCgVQbGFuZRAD",
            "KkMKDEJ1aWxkaW5nVHlwZRIOCgpUZWNoQ2VudGVyEAASDwoLVHJhZGVDZW50",
            "ZXIQARISCg1DYXBpdGFsQ2VudGVyEI9OQglaB3BiLmJhc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbBase.TroopStackType), typeof(global::PbBase.BuildingType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.Position), global::PbBase.Position.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.MovePlan), global::PbBase.MovePlan.Parser, new[]{ "OriginalStack", "CurrentStack", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.Round), global::PbBase.Round.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.SimpleMovePlan), global::PbBase.SimpleMovePlan.Parser, new[]{ "Id", "StackId", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.Player), global::PbBase.Player.Parser, new[]{ "Id", "Name", "Role" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.Tile), global::PbBase.Tile.Parser, new[]{ "Id", "OwnerId", "Level", "Position", "Visible" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.Capital), global::PbBase.Capital.Parser, new[]{ "Id", "OwnerId", "Level", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.Talent), global::PbBase.Talent.Parser, new[]{ "Id", "OwnerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.Building), global::PbBase.Building.Parser, new[]{ "Id", "OwnerId", "Level", "Position", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.TroopStack), global::PbBase.TroopStack.Parser, new[]{ "Id", "OwnerId", "Type", "Amount", "Position", "MovementStamina", "AttackStamina", "LoadedTroopId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBase.IdentityPayload), global::PbBase.IdentityPayload.Parser, new[]{ "JwtToken", "PlayerId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TroopStackType {
    [pbr::OriginalName("Infantry")] Infantry = 0,
    [pbr::OriginalName("Tank")] Tank = 1,
    [pbr::OriginalName("Fort")] Fort = 2,
    [pbr::OriginalName("Plane")] Plane = 3,
  }

  public enum BuildingType {
    [pbr::OriginalName("TechCenter")] TechCenter = 0,
    [pbr::OriginalName("TradeCenter")] TradeCenter = 1,
    [pbr::OriginalName("CapitalCenter")] CapitalCenter = 9999,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Logic Position Struct
  /// </summary>
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Every Stack's move plan
  /// </summary>
  public sealed partial class MovePlan : pb::IMessage<MovePlan> {
    private static readonly pb::MessageParser<MovePlan> _parser = new pb::MessageParser<MovePlan>(() => new MovePlan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovePlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePlan(MovePlan other) : this() {
      originalStack_ = other.originalStack_ != null ? other.originalStack_.Clone() : null;
      currentStack_ = other.currentStack_ != null ? other.currentStack_.Clone() : null;
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePlan Clone() {
      return new MovePlan(this);
    }

    /// <summary>Field number for the "OriginalStack" field.</summary>
    public const int OriginalStackFieldNumber = 1;
    private global::PbBase.TroopStack originalStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack OriginalStack {
      get { return originalStack_; }
      set {
        originalStack_ = value;
      }
    }

    /// <summary>Field number for the "CurrentStack" field.</summary>
    public const int CurrentStackFieldNumber = 2;
    private global::PbBase.TroopStack currentStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStack CurrentStack {
      get { return currentStack_; }
      set {
        currentStack_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbBase.Position> _repeated_path_codec
        = pb::FieldCodec.ForMessage(26, global::PbBase.Position.Parser);
    private readonly pbc::RepeatedField<global::PbBase.Position> path_ = new pbc::RepeatedField<global::PbBase.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.Position> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovePlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovePlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OriginalStack, other.OriginalStack)) return false;
      if (!object.Equals(CurrentStack, other.CurrentStack)) return false;
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (originalStack_ != null) hash ^= OriginalStack.GetHashCode();
      if (currentStack_ != null) hash ^= CurrentStack.GetHashCode();
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (originalStack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OriginalStack);
      }
      if (currentStack_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentStack);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (originalStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginalStack);
      }
      if (currentStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentStack);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovePlan other) {
      if (other == null) {
        return;
      }
      if (other.originalStack_ != null) {
        if (originalStack_ == null) {
          OriginalStack = new global::PbBase.TroopStack();
        }
        OriginalStack.MergeFrom(other.OriginalStack);
      }
      if (other.currentStack_ != null) {
        if (currentStack_ == null) {
          CurrentStack = new global::PbBase.TroopStack();
        }
        CurrentStack.MergeFrom(other.CurrentStack);
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (originalStack_ == null) {
              OriginalStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(OriginalStack);
            break;
          }
          case 18: {
            if (currentStack_ == null) {
              CurrentStack = new global::PbBase.TroopStack();
            }
            input.ReadMessage(CurrentStack);
            break;
          }
          case 26: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Game Round
  /// </summary>
  public sealed partial class Round : pb::IMessage<Round> {
    private static readonly pb::MessageParser<Round> _parser = new pb::MessageParser<Round>(() => new Round());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Round> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round(Round other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round Clone() {
      return new Round(this);
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Round);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Round other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Round other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleMovePlan : pb::IMessage<SimpleMovePlan> {
    private static readonly pb::MessageParser<SimpleMovePlan> _parser = new pb::MessageParser<SimpleMovePlan>(() => new SimpleMovePlan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleMovePlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMovePlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMovePlan(SimpleMovePlan other) : this() {
      id_ = other.id_;
      stackId_ = other.stackId_;
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMovePlan Clone() {
      return new SimpleMovePlan(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "StackId" field.</summary>
    public const int StackIdFieldNumber = 2;
    private long stackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StackId {
      get { return stackId_; }
      set {
        stackId_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbBase.Position> _repeated_path_codec
        = pb::FieldCodec.ForMessage(26, global::PbBase.Position.Parser);
    private readonly pbc::RepeatedField<global::PbBase.Position> path_ = new pbc::RepeatedField<global::PbBase.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.Position> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleMovePlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleMovePlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StackId != other.StackId) return false;
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (StackId != 0L) hash ^= StackId.GetHashCode();
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (StackId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StackId);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (StackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StackId);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleMovePlan other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.StackId != 0L) {
        StackId = other.StackId;
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            StackId = input.ReadInt64();
            break;
          }
          case 26: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Player Information
  /// </summary>
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      role_ = other.role_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Role" field.</summary>
    public const int RoleFieldNumber = 3;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Role != other.Role) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Role.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Role = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Tile Infomation
  /// </summary>
  public sealed partial class Tile : pb::IMessage<Tile> {
    private static readonly pb::MessageParser<Tile> _parser = new pb::MessageParser<Tile>(() => new Tile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tile(Tile other) : this() {
      id_ = other.id_;
      ownerId_ = other.ownerId_;
      level_ = other.level_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      visible_ = other.visible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tile Clone() {
      return new Tile(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "OwnerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private long ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::PbBase.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Visible" field.</summary>
    public const int VisibleFieldNumber = 5;
    private bool visible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Visible != other.Visible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (OwnerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OwnerId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Visible != false) {
        output.WriteRawTag(40);
        output.WriteBool(Visible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Visible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tile other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PbBase.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::PbBase.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 40: {
            Visible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Capital Information
  /// </summary>
  public sealed partial class Capital : pb::IMessage<Capital> {
    private static readonly pb::MessageParser<Capital> _parser = new pb::MessageParser<Capital>(() => new Capital());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Capital> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capital() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capital(Capital other) : this() {
      id_ = other.id_;
      ownerId_ = other.ownerId_;
      level_ = other.level_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capital Clone() {
      return new Capital(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "OwnerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private long ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::PbBase.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Capital);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Capital other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (OwnerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OwnerId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Capital other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PbBase.Position();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::PbBase.Position();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Talent : pb::IMessage<Talent> {
    private static readonly pb::MessageParser<Talent> _parser = new pb::MessageParser<Talent>(() => new Talent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Talent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Talent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Talent(Talent other) : this() {
      id_ = other.id_;
      ownerId_ = other.ownerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Talent Clone() {
      return new Talent(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "OwnerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private long ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Talent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Talent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerId != other.OwnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (OwnerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OwnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Talent other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Building Information
  /// </summary>
  public sealed partial class Building : pb::IMessage<Building> {
    private static readonly pb::MessageParser<Building> _parser = new pb::MessageParser<Building>(() => new Building());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Building> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Building() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Building(Building other) : this() {
      id_ = other.id_;
      ownerId_ = other.ownerId_;
      level_ = other.level_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Building Clone() {
      return new Building(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "OwnerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private long ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::PbBase.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::PbBase.BuildingType type_ = global::PbBase.BuildingType.TechCenter;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.BuildingType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Building);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Building other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Type != global::PbBase.BuildingType.TechCenter) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (OwnerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OwnerId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Type != global::PbBase.BuildingType.TechCenter) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Type != global::PbBase.BuildingType.TechCenter) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Building other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PbBase.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Type != global::PbBase.BuildingType.TechCenter) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::PbBase.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 40: {
            Type = (global::PbBase.BuildingType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Troop Stack(A Group of troops in same type)
  /// </summary>
  public sealed partial class TroopStack : pb::IMessage<TroopStack> {
    private static readonly pb::MessageParser<TroopStack> _parser = new pb::MessageParser<TroopStack>(() => new TroopStack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopStack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopStack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopStack(TroopStack other) : this() {
      id_ = other.id_;
      ownerId_ = other.ownerId_;
      type_ = other.type_;
      amount_ = other.amount_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      movementStamina_ = other.movementStamina_;
      attackStamina_ = other.attackStamina_;
      loadedTroopId_ = other.loadedTroopId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopStack Clone() {
      return new TroopStack(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "OwnerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private long ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::PbBase.TroopStackType type_ = global::PbBase.TroopStackType.Infantry;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.TroopStackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::PbBase.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "MovementStamina" field.</summary>
    public const int MovementStaminaFieldNumber = 6;
    private int movementStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovementStamina {
      get { return movementStamina_; }
      set {
        movementStamina_ = value;
      }
    }

    /// <summary>Field number for the "AttackStamina" field.</summary>
    public const int AttackStaminaFieldNumber = 7;
    private int attackStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackStamina {
      get { return attackStamina_; }
      set {
        attackStamina_ = value;
      }
    }

    /// <summary>Field number for the "LoadedTroopId" field.</summary>
    public const int LoadedTroopIdFieldNumber = 8;
    private long loadedTroopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LoadedTroopId {
      get { return loadedTroopId_; }
      set {
        loadedTroopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopStack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopStack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Type != other.Type) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (MovementStamina != other.MovementStamina) return false;
      if (AttackStamina != other.AttackStamina) return false;
      if (LoadedTroopId != other.LoadedTroopId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      if (Type != global::PbBase.TroopStackType.Infantry) hash ^= Type.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (MovementStamina != 0) hash ^= MovementStamina.GetHashCode();
      if (AttackStamina != 0) hash ^= AttackStamina.GetHashCode();
      if (LoadedTroopId != 0L) hash ^= LoadedTroopId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (OwnerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OwnerId);
      }
      if (Type != global::PbBase.TroopStackType.Infantry) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Amount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Amount);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (MovementStamina != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MovementStamina);
      }
      if (AttackStamina != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AttackStamina);
      }
      if (LoadedTroopId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LoadedTroopId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      if (Type != global::PbBase.TroopStackType.Infantry) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (MovementStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovementStamina);
      }
      if (AttackStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackStamina);
      }
      if (LoadedTroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoadedTroopId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopStack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
      if (other.Type != global::PbBase.TroopStackType.Infantry) {
        Type = other.Type;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PbBase.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.MovementStamina != 0) {
        MovementStamina = other.MovementStamina;
      }
      if (other.AttackStamina != 0) {
        AttackStamina = other.AttackStamina;
      }
      if (other.LoadedTroopId != 0L) {
        LoadedTroopId = other.LoadedTroopId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt64();
            break;
          }
          case 24: {
            Type = (global::PbBase.TroopStackType) input.ReadEnum();
            break;
          }
          case 32: {
            Amount = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::PbBase.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 48: {
            MovementStamina = input.ReadInt32();
            break;
          }
          case 56: {
            AttackStamina = input.ReadInt32();
            break;
          }
          case 64: {
            LoadedTroopId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// User Identity infomation to determine who is the player
  /// </summary>
  public sealed partial class IdentityPayload : pb::IMessage<IdentityPayload> {
    private static readonly pb::MessageParser<IdentityPayload> _parser = new pb::MessageParser<IdentityPayload>(() => new IdentityPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentityPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBase.BaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityPayload(IdentityPayload other) : this() {
      jwtToken_ = other.jwtToken_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityPayload Clone() {
      return new IdentityPayload(this);
    }

    /// <summary>Field number for the "JwtToken" field.</summary>
    public const int JwtTokenFieldNumber = 1;
    private string jwtToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JwtToken {
      get { return jwtToken_; }
      set {
        jwtToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentityPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentityPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JwtToken != other.JwtToken) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JwtToken.Length != 0) hash ^= JwtToken.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JwtToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JwtToken);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JwtToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JwtToken);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentityPayload other) {
      if (other == null) {
        return;
      }
      if (other.JwtToken.Length != 0) {
        JwtToken = other.JwtToken;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            JwtToken = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
