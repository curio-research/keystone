// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbGame {

  /// <summary>Holder for reflection information generated from game.proto</summary>
  public static partial class GameReflection {

    #region Descriptor
    /// <summary>File descriptor for game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpnYW1lLnByb3RvEgdwYl9nYW1lGgpiYXNlLnByb3RvIicKE0MyU19Fc3Rh",
            "Ymxpc2hQbGF5ZXISEAoIUGxheWVySWQYASABKAMiQgoNQzJTX0dhbWVTdGF0",
            "ZRIxCg9JZGVudGl0eVBheWxvYWQYASABKAsyGC5wYl9iYXNlLklkZW50aXR5",
            "UGF5bG9hZCJQCghDMlNfUGluZxIRCgl0aW1lU3RhbXAYASABKAMSMQoPSWRl",
            "bnRpdHlQYXlsb2FkGAIgASgLMhgucGJfYmFzZS5JZGVudGl0eVBheWxvYWQi",
            "FQoTUzJDX0VzdGFibGlzaFBsYXllciKgAgoNUzJDX0dhbWVTdGF0ZRIdCgVS",
            "b3VuZBgBIAEoCzIOLnBiX2Jhc2UuUm91bmQSIwoKUGxheWVyTGlzdBgCIAMo",
            "CzIPLnBiX2Jhc2UuUGxheWVyEh8KCFRpbGVMaXN0GAMgAygLMg0ucGJfYmFz",
            "ZS5UaWxlEisKDlRyb29wU3RhY2tMaXN0GAQgAygLMhMucGJfYmFzZS5Ucm9v",
            "cFN0YWNrEiUKC0NhcGl0YWxMaXN0GAUgAygLMhAucGJfYmFzZS5DYXBpdGFs",
            "EicKDEJ1aWxkaW5nTGlzdBgGIAMoCzIRLnBiX2Jhc2UuQnVpbGRpbmcSLQoM",
            "TW92ZVBsYW5MaXN0GAcgAygLMhcucGJfYmFzZS5TaW1wbGVNb3ZlUGxhbiId",
            "CghTMkNfUGluZxIRCglUaW1lU3RhbXAYASABKAMiJAoRUzJDX1NlcnZlck1l",
            "c3NhZ2USDwoHQ29udGVudBgBIAEoCUIJWgdwYi5nYW1lYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbBase.BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGame.C2S_EstablishPlayer), global::PbGame.C2S_EstablishPlayer.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGame.C2S_GameState), global::PbGame.C2S_GameState.Parser, new[]{ "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGame.C2S_Ping), global::PbGame.C2S_Ping.Parser, new[]{ "TimeStamp", "IdentityPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGame.S2C_EstablishPlayer), global::PbGame.S2C_EstablishPlayer.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGame.S2C_GameState), global::PbGame.S2C_GameState.Parser, new[]{ "Round", "PlayerList", "TileList", "TroopStackList", "CapitalList", "BuildingList", "MovePlanList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGame.S2C_Ping), global::PbGame.S2C_Ping.Parser, new[]{ "TimeStamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGame.S2C_ServerMessage), global::PbGame.S2C_ServerMessage.Parser, new[]{ "Content" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Register Player in battle once connected
  /// </summary>
  public sealed partial class C2S_EstablishPlayer : pb::IMessage<C2S_EstablishPlayer> {
    private static readonly pb::MessageParser<C2S_EstablishPlayer> _parser = new pb::MessageParser<C2S_EstablishPlayer>(() => new C2S_EstablishPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_EstablishPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGame.GameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EstablishPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EstablishPlayer(C2S_EstablishPlayer other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EstablishPlayer Clone() {
      return new C2S_EstablishPlayer(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_EstablishPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_EstablishPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_EstablishPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Fetch Current Game State
  /// </summary>
  public sealed partial class C2S_GameState : pb::IMessage<C2S_GameState> {
    private static readonly pb::MessageParser<C2S_GameState> _parser = new pb::MessageParser<C2S_GameState>(() => new C2S_GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGame.GameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GameState(C2S_GameState other) : this() {
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GameState Clone() {
      return new C2S_GameState(this);
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 1;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identityPayload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GameState other) {
      if (other == null) {
        return;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sending ping to server to test network latency &amp; report whether player is alive
  /// </summary>
  public sealed partial class C2S_Ping : pb::IMessage<C2S_Ping> {
    private static readonly pb::MessageParser<C2S_Ping> _parser = new pb::MessageParser<C2S_Ping>(() => new C2S_Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGame.GameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Ping(C2S_Ping other) : this() {
      timeStamp_ = other.timeStamp_;
      identityPayload_ = other.identityPayload_ != null ? other.identityPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Ping Clone() {
      return new C2S_Ping(this);
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 1;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "IdentityPayload" field.</summary>
    public const int IdentityPayloadFieldNumber = 2;
    private global::PbBase.IdentityPayload identityPayload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.IdentityPayload IdentityPayload {
      get { return identityPayload_; }
      set {
        identityPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp != other.TimeStamp) return false;
      if (!object.Equals(IdentityPayload, other.IdentityPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (identityPayload_ != null) hash ^= IdentityPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeStamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimeStamp);
      }
      if (identityPayload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IdentityPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (identityPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_Ping other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.identityPayload_ != null) {
        if (identityPayload_ == null) {
          IdentityPayload = new global::PbBase.IdentityPayload();
        }
        IdentityPayload.MergeFrom(other.IdentityPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 18: {
            if (identityPayload_ == null) {
              IdentityPayload = new global::PbBase.IdentityPayload();
            }
            input.ReadMessage(IdentityPayload);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [blocking] Result of Establish a player
  /// </summary>
  public sealed partial class S2C_EstablishPlayer : pb::IMessage<S2C_EstablishPlayer> {
    private static readonly pb::MessageParser<S2C_EstablishPlayer> _parser = new pb::MessageParser<S2C_EstablishPlayer>(() => new S2C_EstablishPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_EstablishPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGame.GameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EstablishPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EstablishPlayer(S2C_EstablishPlayer other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EstablishPlayer Clone() {
      return new S2C_EstablishPlayer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_EstablishPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_EstablishPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_EstablishPlayer other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// [blocking] Result of fetching current game state
  /// </summary>
  public sealed partial class S2C_GameState : pb::IMessage<S2C_GameState> {
    private static readonly pb::MessageParser<S2C_GameState> _parser = new pb::MessageParser<S2C_GameState>(() => new S2C_GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGame.GameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameState(S2C_GameState other) : this() {
      round_ = other.round_ != null ? other.round_.Clone() : null;
      playerList_ = other.playerList_.Clone();
      tileList_ = other.tileList_.Clone();
      troopStackList_ = other.troopStackList_.Clone();
      capitalList_ = other.capitalList_.Clone();
      buildingList_ = other.buildingList_.Clone();
      movePlanList_ = other.movePlanList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameState Clone() {
      return new S2C_GameState(this);
    }

    /// <summary>Field number for the "Round" field.</summary>
    public const int RoundFieldNumber = 1;
    private global::PbBase.Round round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBase.Round Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "PlayerList" field.</summary>
    public const int PlayerListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbBase.Player> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(18, global::PbBase.Player.Parser);
    private readonly pbc::RepeatedField<global::PbBase.Player> playerList_ = new pbc::RepeatedField<global::PbBase.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.Player> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "TileList" field.</summary>
    public const int TileListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbBase.Tile> _repeated_tileList_codec
        = pb::FieldCodec.ForMessage(26, global::PbBase.Tile.Parser);
    private readonly pbc::RepeatedField<global::PbBase.Tile> tileList_ = new pbc::RepeatedField<global::PbBase.Tile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.Tile> TileList {
      get { return tileList_; }
    }

    /// <summary>Field number for the "TroopStackList" field.</summary>
    public const int TroopStackListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PbBase.TroopStack> _repeated_troopStackList_codec
        = pb::FieldCodec.ForMessage(34, global::PbBase.TroopStack.Parser);
    private readonly pbc::RepeatedField<global::PbBase.TroopStack> troopStackList_ = new pbc::RepeatedField<global::PbBase.TroopStack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.TroopStack> TroopStackList {
      get { return troopStackList_; }
    }

    /// <summary>Field number for the "CapitalList" field.</summary>
    public const int CapitalListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbBase.Capital> _repeated_capitalList_codec
        = pb::FieldCodec.ForMessage(42, global::PbBase.Capital.Parser);
    private readonly pbc::RepeatedField<global::PbBase.Capital> capitalList_ = new pbc::RepeatedField<global::PbBase.Capital>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.Capital> CapitalList {
      get { return capitalList_; }
    }

    /// <summary>Field number for the "BuildingList" field.</summary>
    public const int BuildingListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::PbBase.Building> _repeated_buildingList_codec
        = pb::FieldCodec.ForMessage(50, global::PbBase.Building.Parser);
    private readonly pbc::RepeatedField<global::PbBase.Building> buildingList_ = new pbc::RepeatedField<global::PbBase.Building>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.Building> BuildingList {
      get { return buildingList_; }
    }

    /// <summary>Field number for the "MovePlanList" field.</summary>
    public const int MovePlanListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::PbBase.SimpleMovePlan> _repeated_movePlanList_codec
        = pb::FieldCodec.ForMessage(58, global::PbBase.SimpleMovePlan.Parser);
    private readonly pbc::RepeatedField<global::PbBase.SimpleMovePlan> movePlanList_ = new pbc::RepeatedField<global::PbBase.SimpleMovePlan>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBase.SimpleMovePlan> MovePlanList {
      get { return movePlanList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Round, other.Round)) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!tileList_.Equals(other.tileList_)) return false;
      if(!troopStackList_.Equals(other.troopStackList_)) return false;
      if(!capitalList_.Equals(other.capitalList_)) return false;
      if(!buildingList_.Equals(other.buildingList_)) return false;
      if(!movePlanList_.Equals(other.movePlanList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (round_ != null) hash ^= Round.GetHashCode();
      hash ^= playerList_.GetHashCode();
      hash ^= tileList_.GetHashCode();
      hash ^= troopStackList_.GetHashCode();
      hash ^= capitalList_.GetHashCode();
      hash ^= buildingList_.GetHashCode();
      hash ^= movePlanList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (round_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Round);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      tileList_.WriteTo(output, _repeated_tileList_codec);
      troopStackList_.WriteTo(output, _repeated_troopStackList_codec);
      capitalList_.WriteTo(output, _repeated_capitalList_codec);
      buildingList_.WriteTo(output, _repeated_buildingList_codec);
      movePlanList_.WriteTo(output, _repeated_movePlanList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (round_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Round);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += tileList_.CalculateSize(_repeated_tileList_codec);
      size += troopStackList_.CalculateSize(_repeated_troopStackList_codec);
      size += capitalList_.CalculateSize(_repeated_capitalList_codec);
      size += buildingList_.CalculateSize(_repeated_buildingList_codec);
      size += movePlanList_.CalculateSize(_repeated_movePlanList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GameState other) {
      if (other == null) {
        return;
      }
      if (other.round_ != null) {
        if (round_ == null) {
          Round = new global::PbBase.Round();
        }
        Round.MergeFrom(other.Round);
      }
      playerList_.Add(other.playerList_);
      tileList_.Add(other.tileList_);
      troopStackList_.Add(other.troopStackList_);
      capitalList_.Add(other.capitalList_);
      buildingList_.Add(other.buildingList_);
      movePlanList_.Add(other.movePlanList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (round_ == null) {
              Round = new global::PbBase.Round();
            }
            input.ReadMessage(Round);
            break;
          }
          case 18: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 26: {
            tileList_.AddEntriesFrom(input, _repeated_tileList_codec);
            break;
          }
          case 34: {
            troopStackList_.AddEntriesFrom(input, _repeated_troopStackList_codec);
            break;
          }
          case 42: {
            capitalList_.AddEntriesFrom(input, _repeated_capitalList_codec);
            break;
          }
          case 50: {
            buildingList_.AddEntriesFrom(input, _repeated_buildingList_codec);
            break;
          }
          case 58: {
            movePlanList_.AddEntriesFrom(input, _repeated_movePlanList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [blocking] Result of ping
  /// </summary>
  public sealed partial class S2C_Ping : pb::IMessage<S2C_Ping> {
    private static readonly pb::MessageParser<S2C_Ping> _parser = new pb::MessageParser<S2C_Ping>(() => new S2C_Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGame.GameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Ping(S2C_Ping other) : this() {
      timeStamp_ = other.timeStamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Ping Clone() {
      return new S2C_Ping(this);
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 1;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp != other.TimeStamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeStamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Ping other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeStamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [non-blocking] Common Game Error Message
  /// </summary>
  public sealed partial class S2C_ServerMessage : pb::IMessage<S2C_ServerMessage> {
    private static readonly pb::MessageParser<S2C_ServerMessage> _parser = new pb::MessageParser<S2C_ServerMessage>(() => new S2C_ServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGame.GameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ServerMessage(S2C_ServerMessage other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ServerMessage Clone() {
      return new S2C_ServerMessage(this);
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
