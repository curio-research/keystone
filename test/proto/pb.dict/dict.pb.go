// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.9.2
// source: dict.proto

package pb_dict

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMD int32

const (
	CMD_NONE CMD = 0
	// Test
	CMD_pb_test_C2S_ResetGameState CMD = 100
	CMD_pb_test_S2C_ResetGameState CMD = 200
	// Game Common
	CMD_pb_game_C2S_EstablishPlayer  CMD = 1000
	CMD_pb_game_C2S_GameState        CMD = 1001
	CMD_pb_game_C2S_Ping             CMD = 1002
	CMD_pb_game_C2S_ClaimDealer      CMD = 1003
	CMD_pb_game_C2S_PlayerReady      CMD = 1004
	CMD_pb_game_C2S_PreparationState CMD = 1005
	CMD_pb_game_C2S_PlayerUnready    CMD = 1006
	CMD_pb_game_S2C_EstablishPlayer  CMD = 1100
	CMD_pb_game_S2C_GameState        CMD = 1101
	CMD_pb_game_S2C_Ping             CMD = 1102
	CMD_pb_game_S2C_ClaimDealer      CMD = 1103
	CMD_pb_game_S2C_PlayerReady      CMD = 1104
	CMD_pb_game_S2C_GameStart        CMD = 1105
	CMD_pb_game_S2C_GameEnd          CMD = 1106
	CMD_pb_game_S2C_PreparationState CMD = 1007
	CMD_pb_game_S2C_PlayerUnready    CMD = 1008
	CMD_pb_game_S2C_ServerMessage    CMD = 1050
	// Round
	CMD_pb_round_C2S_DiscardCards  CMD = 2000
	CMD_pb_round_C2S_TurnEnd       CMD = 2001
	CMD_pb_round_S2C_RoundStart    CMD = 2100
	CMD_pb_round_S2C_TurnStart     CMD = 2101
	CMD_pb_round_S2C_ClaimCardsEnd CMD = 2102
	CMD_pb_round_S2C_Reward        CMD = 2103
	// Battle
	CMD_pb_battle_C2S_Produce                CMD = 3000
	CMD_pb_battle_C2S_MoveTroops             CMD = 3001
	CMD_pb_battle_C2S_Attack                 CMD = 3002
	CMD_pb_battle_C2S_ToggleTankGuardMode    CMD = 3003
	CMD_pb_battle_C2S_ProduceBuilding        CMD = 3004
	CMD_pb_battle_C2S_PlaneLoad              CMD = 3005
	CMD_pb_battle_C2S_PlaneUnload            CMD = 3006
	CMD_pb_battle_C2S_UpgradeBuilding        CMD = 3007
	CMD_pb_battle_C2S_UpgradeCapital         CMD = 3008
	CMD_pb_battle_C2S_ProduceBlueprint       CMD = 3009
	CMD_pb_battle_S2C_Produce                CMD = 3100
	CMD_pb_battle_S2C_MoveComplete           CMD = 3101
	CMD_pb_battle_S2C_Attack                 CMD = 3102
	CMD_pb_battle_S2C_ToggleTankGuardMode    CMD = 3103
	CMD_pb_battle_S2C_MergeTroops            CMD = 3104
	CMD_pb_battle_S2C_MoveTroopsPlanningPath CMD = 3105
	CMD_pb_battle_S2C_CrossLargeTile         CMD = 3106
	CMD_pb_battle_S2C_LargeTileChange        CMD = 3107
	CMD_pb_battle_S2C_ProduceBuilding        CMD = 3108
	CMD_pb_battle_S2C_PlaneLoad              CMD = 3109
	CMD_pb_battle_S2C_PlaneUnload            CMD = 3110
	CMD_pb_battle_S2C_UpgradeBuilding        CMD = 3111
	CMD_pb_battle_S2C_UpgradeCapital         CMD = 3112
	CMD_pb_battle_S2C_ProduceBlueprint       CMD = 3113
	// Test
	CMD_pb_test_C2S_Test CMD = 9000
)

// Enum value maps for CMD.
var (
	CMD_name = map[int32]string{
		0:    "NONE",
		100:  "pb_test_C2S_ResetGameState",
		200:  "pb_test_S2C_ResetGameState",
		1000: "pb_game_C2S_EstablishPlayer",
		1001: "pb_game_C2S_GameState",
		1002: "pb_game_C2S_Ping",
		1003: "pb_game_C2S_ClaimDealer",
		1004: "pb_game_C2S_PlayerReady",
		1005: "pb_game_C2S_PreparationState",
		1006: "pb_game_C2S_PlayerUnready",
		1100: "pb_game_S2C_EstablishPlayer",
		1101: "pb_game_S2C_GameState",
		1102: "pb_game_S2C_Ping",
		1103: "pb_game_S2C_ClaimDealer",
		1104: "pb_game_S2C_PlayerReady",
		1105: "pb_game_S2C_GameStart",
		1106: "pb_game_S2C_GameEnd",
		1007: "pb_game_S2C_PreparationState",
		1008: "pb_game_S2C_PlayerUnready",
		1050: "pb_game_S2C_ServerMessage",
		2000: "pb_round_C2S_DiscardCards",
		2001: "pb_round_C2S_TurnEnd",
		2100: "pb_round_S2C_RoundStart",
		2101: "pb_round_S2C_TurnStart",
		2102: "pb_round_S2C_ClaimCardsEnd",
		2103: "pb_round_S2C_Reward",
		3000: "pb_battle_C2S_Produce",
		3001: "pb_battle_C2S_MoveTroops",
		3002: "pb_battle_C2S_Attack",
		3003: "pb_battle_C2S_ToggleTankGuardMode",
		3004: "pb_battle_C2S_ProduceBuilding",
		3005: "pb_battle_C2S_PlaneLoad",
		3006: "pb_battle_C2S_PlaneUnload",
		3007: "pb_battle_C2S_UpgradeBuilding",
		3008: "pb_battle_C2S_UpgradeCapital",
		3009: "pb_battle_C2S_ProduceBlueprint",
		3100: "pb_battle_S2C_Produce",
		3101: "pb_battle_S2C_MoveComplete",
		3102: "pb_battle_S2C_Attack",
		3103: "pb_battle_S2C_ToggleTankGuardMode",
		3104: "pb_battle_S2C_MergeTroops",
		3105: "pb_battle_S2C_MoveTroopsPlanningPath",
		3106: "pb_battle_S2C_CrossLargeTile",
		3107: "pb_battle_S2C_LargeTileChange",
		3108: "pb_battle_S2C_ProduceBuilding",
		3109: "pb_battle_S2C_PlaneLoad",
		3110: "pb_battle_S2C_PlaneUnload",
		3111: "pb_battle_S2C_UpgradeBuilding",
		3112: "pb_battle_S2C_UpgradeCapital",
		3113: "pb_battle_S2C_ProduceBlueprint",
		9000: "pb_test_C2S_Test",
	}
	CMD_value = map[string]int32{
		"NONE":                                 0,
		"pb_test_C2S_ResetGameState":           100,
		"pb_test_S2C_ResetGameState":           200,
		"pb_game_C2S_EstablishPlayer":          1000,
		"pb_game_C2S_GameState":                1001,
		"pb_game_C2S_Ping":                     1002,
		"pb_game_C2S_ClaimDealer":              1003,
		"pb_game_C2S_PlayerReady":              1004,
		"pb_game_C2S_PreparationState":         1005,
		"pb_game_C2S_PlayerUnready":            1006,
		"pb_game_S2C_EstablishPlayer":          1100,
		"pb_game_S2C_GameState":                1101,
		"pb_game_S2C_Ping":                     1102,
		"pb_game_S2C_ClaimDealer":              1103,
		"pb_game_S2C_PlayerReady":              1104,
		"pb_game_S2C_GameStart":                1105,
		"pb_game_S2C_GameEnd":                  1106,
		"pb_game_S2C_PreparationState":         1007,
		"pb_game_S2C_PlayerUnready":            1008,
		"pb_game_S2C_ServerMessage":            1050,
		"pb_round_C2S_DiscardCards":            2000,
		"pb_round_C2S_TurnEnd":                 2001,
		"pb_round_S2C_RoundStart":              2100,
		"pb_round_S2C_TurnStart":               2101,
		"pb_round_S2C_ClaimCardsEnd":           2102,
		"pb_round_S2C_Reward":                  2103,
		"pb_battle_C2S_Produce":                3000,
		"pb_battle_C2S_MoveTroops":             3001,
		"pb_battle_C2S_Attack":                 3002,
		"pb_battle_C2S_ToggleTankGuardMode":    3003,
		"pb_battle_C2S_ProduceBuilding":        3004,
		"pb_battle_C2S_PlaneLoad":              3005,
		"pb_battle_C2S_PlaneUnload":            3006,
		"pb_battle_C2S_UpgradeBuilding":        3007,
		"pb_battle_C2S_UpgradeCapital":         3008,
		"pb_battle_C2S_ProduceBlueprint":       3009,
		"pb_battle_S2C_Produce":                3100,
		"pb_battle_S2C_MoveComplete":           3101,
		"pb_battle_S2C_Attack":                 3102,
		"pb_battle_S2C_ToggleTankGuardMode":    3103,
		"pb_battle_S2C_MergeTroops":            3104,
		"pb_battle_S2C_MoveTroopsPlanningPath": 3105,
		"pb_battle_S2C_CrossLargeTile":         3106,
		"pb_battle_S2C_LargeTileChange":        3107,
		"pb_battle_S2C_ProduceBuilding":        3108,
		"pb_battle_S2C_PlaneLoad":              3109,
		"pb_battle_S2C_PlaneUnload":            3110,
		"pb_battle_S2C_UpgradeBuilding":        3111,
		"pb_battle_S2C_UpgradeCapital":         3112,
		"pb_battle_S2C_ProduceBlueprint":       3113,
		"pb_test_C2S_Test":                     9000,
	}
)

func (x CMD) Enum() *CMD {
	p := new(CMD)
	*p = x
	return p
}

func (x CMD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMD) Descriptor() protoreflect.EnumDescriptor {
	return file_dict_proto_enumTypes[0].Descriptor()
}

func (CMD) Type() protoreflect.EnumType {
	return &file_dict_proto_enumTypes[0]
}

func (x CMD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMD.Descriptor instead.
func (CMD) EnumDescriptor() ([]byte, []int) {
	return file_dict_proto_rawDescGZIP(), []int{0}
}

var File_dict_proto protoreflect.FileDescriptor

var file_dict_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x62,
	0x5f, 0x64, 0x69, 0x63, 0x74, 0x2a, 0xc2, 0x0c, 0x0a, 0x03, 0x43, 0x4d, 0x44, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x70, 0x62, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x64, 0x12, 0x1f, 0x0a, 0x1a, 0x70, 0x62, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xc8, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x70, 0x62, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xe8, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x70, 0x62,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x10, 0xe9, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x10, 0xea, 0x07, 0x12, 0x1c, 0x0a,
	0x17, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x10, 0xeb, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x70,
	0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0xec, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x70, 0x62, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xed, 0x07, 0x12, 0x1e, 0x0a, 0x19,
	0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0xee, 0x07, 0x12, 0x20, 0x0a, 0x1b,
	0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xcc, 0x08, 0x12, 0x1a,
	0x0a, 0x15, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xcd, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x70, 0x62,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x10, 0xce,
	0x08, 0x12, 0x1c, 0x0a, 0x17, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x32, 0x43,
	0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x10, 0xcf, 0x08, 0x12,
	0x1c, 0x0a, 0x17, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0xd0, 0x08, 0x12, 0x1a, 0x0a,
	0x15, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0xd1, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x70, 0x62, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x10, 0xd2, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x53,
	0x32, 0x43, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x10, 0xef, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x10, 0xf0, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x9a, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x70, 0x62, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x10, 0xd0, 0x0f, 0x12, 0x19, 0x0a, 0x14, 0x70, 0x62, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x64, 0x10, 0xd1,
	0x0f, 0x12, 0x1c, 0x0a, 0x17, 0x70, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x53, 0x32,
	0x43, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0xb4, 0x10, 0x12,
	0x1b, 0x0a, 0x16, 0x70, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x53, 0x32, 0x43, 0x5f,
	0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0xb5, 0x10, 0x12, 0x1f, 0x0a, 0x1a,
	0x70, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x64, 0x10, 0xb6, 0x10, 0x12, 0x18, 0x0a,
	0x13, 0x70, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x10, 0xb7, 0x10, 0x12, 0x1a, 0x0a, 0x15, 0x70, 0x62, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x10, 0xb8, 0x17, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x43, 0x32, 0x53, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x10,
	0xb9, 0x17, 0x12, 0x19, 0x0a, 0x14, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x43, 0x32, 0x53, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0xba, 0x17, 0x12, 0x26, 0x0a,
	0x21, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x47, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0xbb, 0x17, 0x12, 0x22, 0x0a, 0x1d, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0xbc, 0x17, 0x12, 0x1c, 0x0a, 0x17, 0x70, 0x62, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x10, 0xbd, 0x17, 0x12, 0x1e, 0x0a, 0x19, 0x70, 0x62, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x10, 0xbe, 0x17, 0x12, 0x22, 0x0a, 0x1d, 0x70, 0x62, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0xbf, 0x17, 0x12, 0x21, 0x0a, 0x1c, 0x70,
	0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10, 0xc0, 0x17, 0x12, 0x23,
	0x0a, 0x1e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x32, 0x53, 0x5f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x10, 0xc1, 0x17, 0x12, 0x1a, 0x0a, 0x15, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x10, 0x9c, 0x18, 0x12,
	0x1f, 0x0a, 0x1a, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43,
	0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x9d, 0x18,
	0x12, 0x19, 0x0a, 0x14, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32,
	0x43, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x9e, 0x18, 0x12, 0x26, 0x0a, 0x21, 0x70,
	0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x47, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x10, 0x9f, 0x18, 0x12, 0x1e, 0x0a, 0x19, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x53, 0x32, 0x43, 0x5f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x73,
	0x10, 0xa0, 0x18, 0x12, 0x29, 0x0a, 0x24, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x53, 0x32, 0x43, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x10, 0xa1, 0x18, 0x12, 0x21,
	0x0a, 0x1c, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x10, 0xa2,
	0x18, 0x12, 0x22, 0x0a, 0x1d, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53,
	0x32, 0x43, 0x5f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0xa3, 0x18, 0x12, 0x22, 0x0a, 0x1d, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0xa4, 0x18, 0x12, 0x1c, 0x0a, 0x17, 0x70, 0x62, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x10, 0xa5, 0x18, 0x12, 0x1e, 0x0a, 0x19, 0x70, 0x62, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x10, 0xa6, 0x18, 0x12, 0x22, 0x0a, 0x1d, 0x70, 0x62, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0xa7, 0x18, 0x12, 0x21, 0x0a, 0x1c, 0x70,
	0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10, 0xa8, 0x18, 0x12, 0x23,
	0x0a, 0x1e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x32, 0x43, 0x5f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x10, 0xa9, 0x18, 0x12, 0x15, 0x0a, 0x10, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x43,
	0x32, 0x53, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x10, 0xa8, 0x46, 0x42, 0x09, 0x5a, 0x07, 0x70, 0x62,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dict_proto_rawDescOnce sync.Once
	file_dict_proto_rawDescData = file_dict_proto_rawDesc
)

func file_dict_proto_rawDescGZIP() []byte {
	file_dict_proto_rawDescOnce.Do(func() {
		file_dict_proto_rawDescData = protoimpl.X.CompressGZIP(file_dict_proto_rawDescData)
	})
	return file_dict_proto_rawDescData
}

var file_dict_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dict_proto_goTypes = []interface{}{
	(CMD)(0), // 0: pb_dict.CMD
}
var file_dict_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dict_proto_init() }
func file_dict_proto_init() {
	if File_dict_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dict_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dict_proto_goTypes,
		DependencyIndexes: file_dict_proto_depIdxs,
		EnumInfos:         file_dict_proto_enumTypes,
	}.Build()
	File_dict_proto = out.File
	file_dict_proto_rawDesc = nil
	file_dict_proto_goTypes = nil
	file_dict_proto_depIdxs = nil
}
